import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

const API_BASE_URL = 'http://38.244.179.25:8000';
axios.defaults.baseURL = API_BASE_URL;

function App() {
  const [currentView, setCurrentView] = useState('cards');
  const [cards, setCards] = useState([]);
  const [cardQueue, setCardQueue] = useState([]); // –æ—á–µ—Ä–µ–¥—å –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞
  const [currentCard, setCurrentCard] = useState(null);
  const [favorites, setFavorites] = useState([]);
  const [filter, setFilter] = useState('all');
  const [goals, setGoals] = useState([]); // eslint-disable-line no-unused-vars
  const [currentGoal, setCurrentGoal] = useState(null);
  const [answers, setAnswers] = useState([]);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  useEffect(() => {
    loadInitialData();
  }, []);

  useEffect(() => {
    if (filter === 'all') {
      // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
      if (cards.length > 0) {
        setCardQueue(shuffle([...cards]));
      }
    } else {
      const favCards = cards.filter(card => favorites.some(fav => fav.card_id === card.id));
      setCardQueue(shuffle([...favCards]));
    }
  }, [cards, filter, favorites]);

  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if (cardQueue.length > 0) {
      setCurrentCard(cardQueue[0]);
    } else {
      setCurrentCard(null);
    }
  }, [cardQueue]);

  const loadInitialData = async () => {
    try {
      let user;
      try {
        const userResponse = await axios.post('/users/', { username: 'diana' });
        user = userResponse.data;
      } catch (error) {
        if (error.response?.status === 400) {
          const existingUser = await axios.get('/users/');
          user = existingUser.data.find(u => u.username === 'diana') || existingUser.data[0];
        } else {
          throw error;
        }
      }
      setUser(user);
      const cardsResponse = await axios.get('/cards/');
      setCards(cardsResponse.data);
      const goalsResponse = await axios.get(`/goals/?user_id=${user.id}`);
      setGoals(goalsResponse.data);
      if (goalsResponse.data.length > 0) {
        setCurrentGoal(goalsResponse.data[0]);
      }
      const favoritesResponse = await axios.get(`/favorites/?user_id=${user.id}`);
      setFavorites(favoritesResponse.data);
      if (goalsResponse.data.length > 0) {
        const answersResponse = await axios.get(`/answers/?user_id=${user.id}&goal_id=${goalsResponse.data[0].id}`);
        setAnswers(answersResponse.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response?.data);
    } finally {
      setLoading(false);
    }
  };

  function shuffle(array) {
    // –§–∏—à–µ—Ä-–ô–µ—Ç—Å –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    let arr = [...array];
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
  }

  const handleSwipe = (direction) => {
    if (!currentCard) return;
    if (direction === 'right') {
      addToFavorites(currentCard.id);
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—á–µ—Ä–µ–¥—å –µ—â—ë —Ä–∞–∑ (–±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —á–∞—â–µ)
      setCardQueue(prev => shuffle([...prev.slice(1), currentCard]));
    } else {
      // –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      setCardQueue(prev => prev.slice(1));
    }
  };

  const addToFavorites = async (cardId) => {
    try {
      await axios.post('/favorites/', null, {
        params: { user_id: user.id, card_id: cardId }
      });
      const favoritesResponse = await axios.get(`/favorites/?user_id=${user.id}`);
      setFavorites(favoritesResponse.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    }
  };

  const createGoal = async (goalData) => {
    try {
      const response = await axios.post('/goals/', goalData, {
        params: { user_id: user.id }
      });
      setGoals(prev => [...prev, response.data]);
      setCurrentGoal(response.data);
      setCurrentView('cards');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏:', error);
    }
  };

  const answerDailyQuestion = async (isYes) => {
    if (!currentGoal) return;
    try {
      const today = new Date().toISOString().split('T')[0];
      await axios.post('/answers/', {
        goal_id: currentGoal.id,
        date: today,
        is_yes: isYes
      }, {
        params: { user_id: user.id }
      });
      const answersResponse = await axios.get(`/answers/?user_id=${user.id}&goal_id=${currentGoal.id}`);
      setAnswers(answersResponse.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
    }
  };

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: –ø—Ä–æ—Ü–µ–Ω—Ç = (–∫–æ–ª-–≤–æ –¥–Ω–µ–π —Å –æ—Ç–≤–µ—Ç–æ–º –î–∞) / (–≤—Å–µ –¥–Ω–∏ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π —Ü–µ–ª–∏)
  const getProgress = () => {
    if (!currentGoal) return 0;
    const createdAt = new Date(currentGoal.created_at);
    const targetDate = new Date(currentGoal.target_date);
    const today = new Date();
    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏–ª–∏ –¥–æ targetDate (—á—Ç–æ –º–µ–Ω—å—à–µ)
    const lastDay = today < targetDate ? today : targetDate;
    const totalDays = Math.ceil((lastDay - createdAt) / (1000 * 60 * 60 * 24)) + 1;
    if (totalDays <= 0) return 0;
    const yesAnswers = answers.filter(answer => answer.is_yes).length;
    return Math.min(100, Math.round((yesAnswers / totalDays) * 100));
  };

  const progress = getProgress();

  if (loading) {
    return (
      <div className="container">
        <div className="header">
          <h1>üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</h1>
        </div>
        <div style={{ textAlign: 'center', color: 'white', padding: '40px' }}>
          <h3>–ó–∞–≥—Ä—É–∑–∫–∞...</h3>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="header">
        <h1>üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏</h1>
        {currentGoal && (
          <div style={{ color: 'white', marginTop: 10, fontWeight: 'bold' }}>
            –¶–µ–ª—å: {currentGoal.text} (–¥–æ {new Date(currentGoal.target_date).toLocaleDateString('ru-RU')})
          </div>
        )}
      </div>
      <div className="progress-bar" style={{ marginTop: 10 }}>
        <div className="progress-fill" style={{ width: `${progress}%` }}></div>
      </div>
      <div style={{ color: 'white', textAlign: 'right', fontWeight: 'bold', marginBottom: 10 }}>
        –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%
      </div>
      <div className="navigation">
        <button 
          className={`nav-btn ${currentView === 'cards' ? 'active' : ''}`}
          onClick={() => setCurrentView('cards')}
        >
          –ö–∞—Ä—Ç–æ—á–∫–∏
        </button>
        <button 
          className={`nav-btn ${currentView === 'goal' ? 'active' : ''}`}
          onClick={() => setCurrentView('goal')}
        >
          –¶–µ–ª—å
        </button>
        <button 
          className={`nav-btn ${currentView === 'question' ? 'active' : ''}`}
          onClick={() => setCurrentView('question')}
        >
          –í–æ–ø—Ä–æ—Å –¥–Ω—è
        </button>
      </div>
      {currentView === 'cards' && (
        <div>
          <div className="filters">
            <button 
              className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
              onClick={() => setFilter('all')}
            >
              –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            </button>
            <button 
              className={`filter-btn ${filter === 'favorites' ? 'active' : ''}`}
              onClick={() => setFilter('favorites')}
            >
              –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
            </button>
          </div>
          {currentCard ? (
            <div>
              <div className="card">
                {currentCard.text}
              </div>
              <div className="buttons">
                <button 
                  className="btn btn-skip"
                  onClick={() => handleSwipe('left')}
                >
                  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </button>
                <button 
                  className="btn btn-favorite"
                  onClick={() => handleSwipe('right')}
                >
                  ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                </button>
              </div>
              <div style={{ textAlign: 'center', color: 'white', marginTop: '20px' }}>
                –û—Å—Ç–∞–ª–æ—Å—å: {cardQueue.length}
              </div>
            </div>
          ) : (
            <div className="empty-state">
              <h3>–ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</h3>
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</p>
              <button className="btn btn-like" onClick={() => setCardQueue(shuffle([...cards]))}>
                –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
              </button>
            </div>
          )}
        </div>
      )}
      {currentView === 'goal' && (
        <div>
          {currentGoal ? (
            <div>
              <div className="goal-form">
                <h3>–í–∞—à–∞ —Ü–µ–ª—å:</h3>
                <p>{currentGoal.text}</p>
                <p><strong>–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</strong> {new Date(currentGoal.target_date).toLocaleDateString('ru-RU')}</p>
                <div className="progress-bar">
                  <div 
                    className="progress-fill" 
                    style={{ width: `${progress}%` }}
                  ></div>
                </div>
                <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%</p>
              </div>
            </div>
          ) : (
            <GoalForm onCreateGoal={createGoal} />
          )}
        </div>
      )}
      {currentView === 'question' && currentGoal && (
        <div className="daily-question">
          <h3>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å</h3>
          <p>–¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –∫ —Ü–µ–ª–∏ "{currentGoal.text}"?</p>
          <div className="question-buttons">
            <button 
              className="btn btn-yes"
              onClick={() => answerDailyQuestion(true)}
            >
              –î–∞ ‚úÖ
            </button>
            <button 
              className="btn btn-no"
              onClick={() => answerDailyQuestion(false)}
            >
              –ù–µ—Ç ‚ùå
            </button>
          </div>
          <div className="progress-bar" style={{ marginTop: '20px' }}>
            <div 
              className="progress-fill" 
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%</p>
        </div>
      )}
    </div>
  );
}

function GoalForm({ onCreateGoal }) {
  const [text, setText] = useState('');
  const [targetDate, setTargetDate] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (text && targetDate) {
      onCreateGoal({ text, target_date: targetDate });
    }
  };

  return (
    <div className="goal-form">
      <h3>–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏</h3>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>–¢–µ–∫—Å—Ç —Ü–µ–ª–∏:</label>
          <input
            type="text"
            value={text}
            onChange={(e) => setText(e.target.value)}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"
            required
          />
        </div>
        <div className="form-group">
          <label>–î–∞—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</label>
          <input
            type="date"
            value={targetDate}
            onChange={(e) => setTargetDate(e.target.value)}
            required
          />
        </div>
        <button type="submit" className="btn btn-like">
          –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å
        </button>
      </form>
    </div>
  );
}

export default App;
